# -*- coding: cp1252 -*-
'''Cleans up the html generated by the Dossier Etudiant of Polytechnique'''
'''Depends on BeautifulSoup for xml tree manipulation'''

from bs4 import BeautifulSoup
import colorsys
import re
import urllib
import sys
import os

def getSpacedRGB(nbCols, lih = 0.7, sat = 0.8):
    ret = []
    for n in xrange(nbCols):
        h = float(n)/nbCols
        ret.append(tuple(int(c*255) for c in colorsys.hls_to_rgb(h, lih, sat)))
    return ret
    
def writeTables(tables):
    '''Save html content of elements in tables to html file'''
    output = file('result.html', 'w')
    
    output.write('''<html><head>
<link rel="stylesheet" type="text/css" href="result.css" />
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Horaire Personnel</title></head>''')
    output.write('<center>')
    for table in tables:
        s = table.prettify()
        output.write(s.encode("iso-8859-1"))
        output.write('<br>')
    output.write('</center>')
    output.write('</html>')
    output.close()

def insertBR(matchobj):
    txt = matchobj.group(1)
    #Detect if the match is a room number
    if txt[0] in 'ABCML' and txt[1] == '-':
        return txt
    return txt + '<br />'

#File to be formatted
#Parse command arguments for the file to be formatted
filePath = ''
if len(sys.argv) == 1:
    defaultPath = 'Horaire Personnel.htm'
    if os.path.isfile(defaultPath):
        filePath = defaultPath
    else:
        filePath = raw_input('Horaire path = ')
elif len(sys.argv) == 2:
    filePath = sys.argv[1]
else:
    print "Too many arguments"
    sys.exit(2)

if not os.path.isfile(filePath):
    print "Invalid file passed as parameter"
    sys.exit(2)

print 'Converting file :', filePath
txt = open(filePath).read()

#Preparser formatting
txt = txt.replace('<br>','<br />').replace('À déterminer','')
txt = re.sub('</?center>','',txt)
txt = re.sub('</?font.*?>','',txt)

#insert new line after course name
genieRe = '[A-Z]{1,4}-?([A-Z]{3})?'
numRe = '[0-9]{3,4}[A-Z]?'
sigleRe = '(' + genieRe + numRe + ')'
txt = re.sub(sigleRe, insertBR, txt)

soup = BeautifulSoup(txt) #Parse html

#Basic check to detect if the file is in the expected format
labelCount = len(soup.find_all('label'))
divCount = len(soup.find_all('div'))
assert labelCount > 50 and divCount > 100, "Unexpected html format : html is not full of divs and labels"

def removeLabels():
    for label in soup.find_all('label'):
        label.extract()

divTableSchedule = soup.find(class_='wrapperPourListeCoursActuels') #Extract schedule
rows = divTableSchedule.find_all(recursive=False) #Extract rows

#Create new table for schedule
table = soup.new_tag('table')
for r, row in enumerate(rows) :
    tr = soup.new_tag('tr')
    for elem in row :
        te = soup.new_tag('th') if r==0 else soup.new_tag('td')
        for desc in list(elem.descendants):
            te.append(desc)
        tr.append(te)
    if r==0 :
        removeLabels() #kludge
    table.append(tr)

#remove any divs left
for div in table.find_all('div'):
    div.extract()

#format text from shedule
for txt in table.findAll(text=True):
    s = re.sub('\([0-9]{2}\)','', txt) # remove group numbers
    s = s.replace(' Hebdo.','').replace('Lab. ','Lab').replace('Lab.','Lab').replace('2 sem. ','')
    txt.replaceWith(s)

#convert shedule DOM to 2D array
shedule = table
rows = shedule.findAll('tr')
arr = []
for i, tr in enumerate(rows):
    arr.append([])
    cols = tr.findAll('td')
    for td in cols:
        arr[i].append(td)

arr.pop(0) #remove empty dim
arr = zip(*arr) #transpose shedule

#Merge cells corresponding to the same course
#add rowspan attributes and mark cells to remove
for i in range(0,len(arr)): #row
    for j in xrange(0,len(arr[i])-1): #col index of first cell
        for k in xrange(j+1,len(arr[i])): #col index of second cell
            if len(arr[i][j].text) > 1 and arr[i][j].text == arr[i][k].text:
                arr[i][k]['dirt']= True
                if arr[i][j].get('rowspan') == None:
                    arr[i][j]['rowspan'] = 2
                else:
                    arr[i][j]['rowspan'] += 1
            else:
                break #No match, exit current second cell loop

#find and remove marked cells
dirty = shedule.findAll(dirt=True)
for d in dirty:
    d.extract()

#add class Course to cells
tds = set(t.parent for t in table.findAll(text=re.compile(sigleRe))) #get td with sigle
courses = set()
for td in tds:
    course = str(td.contents[0]).strip()
    courses.add(course)
    td['class'] = course

#Add class Conflict to cells with multiple courses
courseRe = '|'.join(courses)
for td in tds:
    tdcourses = re.findall(courseRe, td.text, re.MULTILINE)
    if len(tdcourses) > 1:
        td['class'] += ' Conflict'

#Generate css rules for each course
cols = getSpacedRGB(len(courses))
fstr = '.{} {{ background-color:rgb{};}}'
colCSSarr = [fstr.format(course,str(col)) for course, col in zip(courses, cols)]

#Add css rule for conflicts
colCSSarr.append('.Conflict {font-weight:bold;}')
colCSS = '\n'.join(colCSSarr)
#print colCSS

#genCSS
css = '''td,th
{
border:1px solid black;
text-align:center;
padding: 5px;
font-family:Arial,Helvetica,sans-serif;
/*Make chrome print the background color*/
-webkit-print-color-adjust:exact;
}

table
{
border:1px solid black;
border-collapse:collapse;
width: 815px;
}
'''+colCSS
with open('result.css','w') as out_file:
    out_file.write(css)

#save result
writeTables((shedule,))
