# -*- coding: cp1252 -*-
"""
Cleans up the html generated by the Dossier Etudiant of Polytechnique
Depends on BeautifulSoup for xml tree manipulation
"""

from bs4 import BeautifulSoup
import colorsys
import re
import sys
import os


def get_spaced_colors(number_colors, lih=0.7, sat=0.8):
    """Returns an array of rgb colors each coded as a tuple of 3 numbers"""
    ret = []
    for n in xrange(number_colors):
        h = float(n)/number_colors
        ret.append(tuple(int(c*255) for c in colorsys.hls_to_rgb(h, lih, sat)))
    return ret
    
def write_tables(tables):
    """Save html content of elements in tables to html file"""
    output = file('result.html', 'w')
    
    output.write('''<html><head>
<link rel="stylesheet" type="text/css" href="result.css" />
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Horaire Personnel</title></head>''')
    output.write('<center>')
    for table in tables:
        pretty_html = table.prettify()
        output.write(pretty_html.encode("iso-8859-1"))
        output.write('<br>')
    output.write('</center>')
    output.write('</html>')
    output.close()


def insert_break(match_obj):
    match_text = match_obj.group(1)
    # Detect if the match is a room number
    if match_text[0] in 'ABCML' and match_text[1] == '-':
        return match_text
    return match_text + '<br />'

# File to be formatted
# Parse command arguments for the file to be formatted
filePath = ''
if len(sys.argv) == 1:
    defaultPath = 'Horaire.html'
    if os.path.isfile(defaultPath):
        filePath = defaultPath
    else:
        filePath = raw_input('Horaire path = ')
elif len(sys.argv) == 2:
    filePath = sys.argv[1]
else:
    print "Too many arguments"
    sys.exit(2)

if not os.path.isfile(filePath):
    print "Invalid file passed as parameter"
    sys.exit(2)

print 'Converting file :', filePath
txt = open(filePath).read()

# Preparser formatting
txt = txt.replace('<br>', '<br />').replace('À déterminer', '')
txt = re.sub('</?center>', '', txt)
txt = re.sub('</?font.*?>', '', txt)

# Insert new line after course name
genieRe = '[A-Z]{1,4}-?([A-Z]{3})?'
numRe = '[0-9]{3,4}[A-Z]?'
sigleRe = '(' + genieRe + numRe + ')'
txt = re.sub(sigleRe, insert_break, txt)

# Parse html
soup = BeautifulSoup(txt)

# Basic check to detect if the file is in the expected format
labelCount = len(soup.find_all('label'))
divCount = len(soup.find_all('div'))
assert labelCount > 50 and divCount > 100, "Unexpected html format : html is not full of divs and labels"


def remove_tags(root, tag_name):
    for tag in root.find_all(tag_name):
        tag.extract()

# No need for the labels
remove_tags(soup, 'label')


def table_from_divs(wrapper_div):
    div_table = wrapper_div
    # Extract rows
    rows = div_table.findAll(recursive=False)

    # Create new table tag and fill it
    table = soup.new_tag('table')
    for row in rows:
        tr = soup.new_tag('tr')
        for elem in row :
            te = soup.new_tag('td')
            for desc in list(elem.descendants):
                te.append(desc)
            tr.append(te)
        table.append(tr)

    # Remove any child divs copied in the new table
    remove_tags(table, 'div')
    return table


def add_header_to_table(strings, table):
    header = soup.new_tag('tr')
    for s in strings:
        cell = soup.new_tag('th')
        cell.append(s)
        header.append(cell)
    table.insert(0, header)

courseTable = table_from_divs(soup.find(class_='wrapperPourListeCoursResume'))
add_header_to_table((u'Sigle', u'Intitulé', u'Groupe théorique', u'Groupe laboratoire', u'Crédits'), courseTable)
soup.html.body.append(courseTable)

scheduleTable = table_from_divs(soup.find(class_='wrapperPourListeCoursActuels'))
add_header_to_table((u'Période', u'Lundi', u'Mardi', u'Mercredi', u'Jeudi', u'Vendredi'), scheduleTable)
soup.html.body.append(scheduleTable)

# Format text from schedule
for txt in scheduleTable.findAll(text=True):
    # Remove group numbers
    s = re.sub('\([0-9]{2}\)', '', txt)
    s = s.replace(' Hebdo.', '').replace('Lab. ', 'Lab').replace('Lab.', 'Lab').replace('2 sem. ', '')
    txt.replaceWith(s)

# Convert schedule DOM to 2D array
schedule = scheduleTable
rows = schedule.findAll('tr')
arr = []
for i, tr in enumerate(rows):
    arr.append([])
    cols = tr.findAll('td')
    for td in cols:
        arr[i].append(td)

# Remove empty dimension
arr.pop(0)
# Transpose schedule
arr = zip(*arr)

# Merge cells corresponding to the same course
# Add rowspan attributes and mark cells to remove
for i in range(0, len(arr)):  # row
    for j in xrange(0, len(arr[i])-1):  # col index of first cell
        for k in xrange(j+1, len(arr[i])):  # col index of second cell
            if len(arr[i][j].text) > 1 and arr[i][j].text == arr[i][k].text:
                arr[i][k]['dirt'] = True
                if arr[i][j].get('rowspan') is None:
                    arr[i][j]['rowspan'] = 2
                else:
                    arr[i][j]['rowspan'] += 1
            else:
                break  # No match, exit current second cell loop

# Find and remove marked cells
dirty = schedule.findAll(dirt=True)
for d in dirty:
    d.extract()

# Add class Course to cells
tds = set(t.parent for t in soup.findAll(text=re.compile(sigleRe)))  # Get td with sigle
courses = set()
for td in tds:
    course = str(td.contents[0]).strip()
    courses.add(course)
    td['class'] = course

# Add class Conflict to cells with multiple courses
courseRe = '|'.join(courses)
for td in tds:
    td_courses = re.findall(courseRe, td.text, re.MULTILINE)
    if len(td_courses) > 1:
        td['class'] += ' Conflict'

# Generate css rules for each course
cols = get_spaced_colors(len(courses))
format_str = '.{} {{ background-color:rgb{};}}'
CSS_colors = [format_str.format(course, str(col)) for course, col in zip(courses, cols)]

# Add css rule for conflicts
CSS_colors.append('.Conflict {font-weight:bold;}')
colCSS = '\n'.join(CSS_colors)
# print colCSS

# Generate CSS
css = '''td,th
{
border:1px solid black;
text-align:center;
padding: 5px;
font-family:Arial,Helvetica,sans-serif;
/*Make chrome print the background color*/
-webkit-print-color-adjust:exact;
}

table
{
border:1px solid black;
border-collapse:collapse;
width: 815px;
}
''' + colCSS

with open('result.css', 'w') as out_file:
    out_file.write(css)

# Save result
write_tables((courseTable, scheduleTable))
